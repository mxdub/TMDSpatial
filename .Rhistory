0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
ndt_spat = t$env.df %>% filter(time_run == t$env.df$time_run[1]) %>% select(env1, patch) %>%
left_join(t$landscape %>% as_tibble() %>% rownames_to_column(var="patch") %>% mutate_at("patch", as.numeric))
ggplot(ndt_spat, aes(x=x, y=y, color = env1))+
geom_point()+
scale_color_gradient2(low = "blue", mid = "white", high = 'red', midpoint = 0.5)+
theme_classic()
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
## Plots occupancies
plots_occupancies(occupancies)
library(vegan)
occ_cscore = t(abundances[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
mod = varpart(occ_cscore,
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]), transfo = 'hel')
mod
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 950,
env_niche_breadth = 0.05, env_optima = c(0.2,0.5,0.6),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
ndt_spat = t$env.df %>% filter(time_run == t$env.df$time_run[1]) %>% select(env1, patch) %>%
left_join(t$landscape %>% as_tibble() %>% rownames_to_column(var="patch") %>% mutate_at("patch", as.numeric))
ggplot(ndt_spat, aes(x=x, y=y, color = env1))+
geom_point()+
scale_color_gradient2(low = "blue", mid = "white", high = 'red', midpoint = 0.5)+
theme_classic()
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
## Plots occupancies
plots_occupancies(occupancies)
occ_cscore = t(abundances[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
mod = varpart(occ_cscore,
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]), transfo = 'hel')
mod
## Computing C-score
position_  = 200
occ_cscore = t(occupancies[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
as.data.frame(occ_cscore)
as.data.frame(occ_cscore)
unique(as.data.frame(occ_cscore))
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 50,
env_niche_breadth = 0.05, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
ndt_spat = t$env.df %>% filter(time_run == t$env.df$time_run[1]) %>% select(env1, patch) %>%
left_join(t$landscape %>% as_tibble() %>% rownames_to_column(var="patch") %>% mutate_at("patch", as.numeric))
ggplot(ndt_spat, aes(x=x, y=y, color = env1))+
geom_point()+
scale_color_gradient2(low = "blue", mid = "white", high = 'red', midpoint = 0.5)+
theme_classic()
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
## Plots occupancies
plots_occupancies(occupancies)
## Computing C-score
position_  = 400
occ_cscore = t(occupancies[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 50,
env_niche_breadth = 0.05, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
### Check spatial autocorrelation
ndt_spat = t$env.df %>% filter(time_run == t$env.df$time_run[1]) %>% select(env1, patch) %>%
left_join(t$landscape %>% as_tibble() %>% rownames_to_column(var="patch") %>% mutate_at("patch", as.numeric))
ggplot(ndt_spat, aes(x=x, y=y, color = env1))+
geom_point()+
scale_color_gradient2(low = "blue", mid = "white", high = 'red', midpoint = 0.5)+
theme_classic()
#### Transform output ####
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
## Plots occupancies
plots_occupancies(occupancies)
## Computing C-score
position_  = 400
occ_cscore = t(occupancies[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
?simulate_MC
1-(1-0.01)^3
1-((1-0.01)^2)*(0.01)
1-(1-0.01)^3
(1-0.01)^3
0.01
0.01^3
10^-6
?ecospat.cons
?ecospat.cons_Cscore
?simulate_MC
t
str(t)
abundances = sim_to_matrix(t)
abundances
str(abundances)
abundances
str(abundances)
names(abundances)
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
## Plots occupancies
plots_occupancies(occupancies)
## Plots occupancies
g = plots_occupancies(occupancies)
g
g
## Plots occupancies
plots_occupancies(abundances)
## Plots occupancies
plots_occupancies(occupancies)
occupancies = abundances
unique(occupancies)
unique(as.vector(occupancies))
occupancies = abund_to_occ(abundances)
unique(as.vector(occupancies))
unique(as.vector(occupancies))
unique(as.vector(occupancies)) > 1
all(unique(as.vector(occupancies)) > 1)
all(unique(as.vector(abundances)) > 1)
all(unique(as.vector(abundances)) < 1)
all(unique(as.vector(abundances)) <= 1)
all(unique(as.vector(occupancies)) <= 1)
## Plots occupancies
plots_occupancies(occupancies)
library(TMDSpatial)
plots_occupancies(abundances)
library(TMDSpatial)
## Plots occupancies
plots_occupancies(occupancies)
## Plots occupancies
plots_occupancies(abundances)
?simulate_MC
t$env.df
simulate_MC()
simulate_MC(patches = 100)
simulate_MC(patches = 100, species = 3)
t = simulate_MC(patches = 100, species = 3)
t = simulate_MC(100,3)
t
sim_output = t
ndt_spat = t$env.df %>% filter(time_run == t$env.df$time_run[1]) %>% select(env1, patch) %>%
left_join(t$landscape %>% as_tibble() %>% rownames_to_column(var="patch") %>% mutate_at("patch", as.numeric))
ggplot(ndt_spat, aes(x=x, y=y, color = env1))+
geom_point()+
scale_color_gradient2(low = "blue", mid = "white", high = 'red', midpoint = 0.5)+
theme_classic()
?simulate_MC
library(TMDSpatial)
library(TMDSpatial)
library(TMDSpatial)
plots_envt(t)
t
library(TMDSpatial)
plots_envt(t)
library(TMDSpatial)
landscape_generate
landscape_generate(10000)
landscape_generate(500)
landscape_generate(1000)
landscape_generate(5000)
unique(landscape_generate(5000))
plots_envt(t)
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 50,
env_niche_breadth = 0.05, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
plots_envt(t)
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 50,
env_niche_breadth = 0.05, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 50,
env_niche_breadth = 0.05, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
plots_envt(t)
library(tidyverse)
library(ecospat)
library(TMDSpatial)
N_patch = 500
N_species=3
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 50,
env_niche_breadth = 0.05, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
plots_envt(t)
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 750,
env_niche_breadth = 0.05, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
plots_envt(t)
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 1,
env_niche_breadth = 0.05, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
plots_envt(t)
#### Transform output ####
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
## Plots occupancies
plots_occupancies(occupancies)
sim_output = t
sim_output$dynamics.df %>% select(-env_niche_breadth, -max_r, -optima, -env)
x = sim_output$dynamics.df %>% select(-env_niche_breadth, -max_r, -optima, -env)
x_ = x %>%spread(time, N)
x_
array(0, dim = c(length(unique(x$species)),
length(unique(x$patch)),
length(unique(x$time))))
?array
tmp = array(0,
dim = c(length(unique(x$species)),
length(unique(x$patch)),
length(unique(x$time))),
dimnames = list(paste0("S", 1:length(unique(x$species))),
paste0("P", 1:length(unique(x$patch))),
paste0("T", 1:length(unique(x$time)))))
tmp
str(tmp)
for(s in 1:length(unique(x$species))){
tmp[s,,] = x_ %>% filter(species == s)%>%arrange(patch)%>%select(-patch, -species)%>%as.matrix()
}
tmp
library(TMDSpatial)
### Check spatial autocorrelation
plots_envt(t)
#### Transform output ####
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
occupancies
## Plots occupancies
plots_occupancies(occupancies)
occupancies
if( !all(unique(as.vector(occupancies)) <= 1) ){
stop("Matrix is not a occurences matrix (values > 1)")
}
occupancies = apply(occupancies, c(1,3), sum) / dim(occupancies)[2]
occupancies
occupancies = occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species) %>%
mutate(name = str_replace(name, "V", "")) %>%
mutate_at(.vars = c("name"), as.numeric)
occupancies %>% as_tibble()
occupancies
occupancies = abund_to_occ(abundances)
apply(occupancies, c(1,3), sum) / dim(occupancies)[2]
occupancies %>% as_tibble()
occupancies %>% as_tibble()
occupancies = apply(occupancies, c(1,3), sum) / dim(occupancies)[2]
occupancies
occupancies %>% as_tibble()
occupancies %>% as_tibble() %>% rowid_to_column("species")
occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species)
occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species) %>%
mutate(name = str_replace(name, "T", ""))
occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species) %>%
mutate(name = str_replace(name, "T", "")) %>%
mutate_at(.vars = c("name"), as.numeric)
occupancies = occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species) %>%
mutate(name = str_replace(name, "T", "")) %>%
mutate_at(.vars = c("name"), as.numeric)
ggplot(occupancies%>%filter(name>0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))+
labs(x = "Time", y = "Occupancy", color = "Species")+
theme_bw()
library(TMDSpatial)
library(tidyverse)
library(ecospat)
library(TMDSpatial)
#### Simulate data ####
N_patch = 500
N_species=3
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 1,
env_niche_breadth = 0.05, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
### Check spatial autocorrelation
plots_envt(t)
#### Transform output ####
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
## Plots occupancies
plots_occupancies(occupancies)
## Computing C-score
position_  = 400
occ_cscore = t(occupancies[,,position_])
occ_cscore
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
library(vegan)
occ_cscore = t(abundances[,,position_])
occ_cscore
abundances[,,position_]
library(vegan)
snapshot = t(abundances[,,position_])
mod = varpart(snapshot,
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]), transfo = 'hel')
mod
showvarparts(2, bg = c("hotpink","skyblue"))
plot(mod, bg = c("hotpink","skyblue"))
afrac = rda(decostand(snapshot, "hel"),
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1],
pcnm(dist(t$landscape))$vectors)
anova(afrac, step = 200, perm.max = 200)
afrac = rda(decostand(snapshot, "hel"),
pcnm(dist(t$landscape))$vectors,
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1])
anova(afrac, step = 200, perm.max = 200)
mod = varpart(vegdist(snapshot, method = "bray"),
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]))
snapshot
vegdist(snapshot, method = "bray")
mod
mod = varpart(vegdist(snapshot, method = "bray"),
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]))
vegdist(snapshot, method = "bray")
?vegdist
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 1,
env_niche_breadth = 0.5, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.01, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 500, burn_in = 100, initialization = 0)
### Check spatial autocorrelation
plots_envt(t)
#### Transform output ####
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
## Plots occupancies
plots_occupancies(occupancies)
## Computing C-score
position_  = 400
occ_cscore = t(occupancies[,,position_])
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
library(vegan)
snapshot = t(abundances[,,position_])
mod = varpart(snapshot,
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]), transfo = 'hel')
mod
showvarparts(2, bg = c("hotpink","skyblue"))
plot(mod, bg = c("hotpink","skyblue"))
afrac = rda(decostand(snapshot, "hel"),
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1],
pcnm(dist(t$landscape))$vectors)
anova(afrac, step = 200, perm.max = 200)
afrac = rda(decostand(snapshot, "hel"),
pcnm(dist(t$landscape))$vectors,
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1])
anova(afrac, step = 200, perm.max = 200)
mod = varpart(vegdist(snapshot, method = "bray"),
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]))
mod
showvarparts(2, bg = c("hotpink","skyblue"))
plot(mod, bg = c("hotpink","skyblue"))
afrac = rda(vegdist(snapshot, method = "bray"),
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1],
pcnm(dist(t$landscape))$vectors)
afrac = rda(decostand(snapshot, "hel"),
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1],
pcnm(dist(t$landscape))$vectors)
anova(afrac, step = 200, perm.max = 200)
# Hmsc
library(Hmsc)
# Créer un tableau qui donne les id des sites pour l'effet random (de taille nrow() de ta matrice de presence/absence)
studyDesign = data.frame( samples = as.factor(rownames(snapshot))  )
studyDesign
# Créer un liste d'effet random, ici, juste un, l'effet 'site'
ranEff = list()
ranEff[['samples']] = HmscRandomLevel(units = unique(studyDesign$samples))
# Var env.
XData = tibble(env1 = t$env.df %>% filter(time_run == min(time_run)) %>% pull(env1))
XData
# Model
m=Hmsc(Y = as.matrix(snapshot),
XData = as.data.frame(XData), XFormula = ~ 1+env1+I(env1^2),
studyDesign = studyDesign, ranLevels = ranEff,
distr = "probit")
m = sampleMcmc(m, samples = 1000, nChains = 3, nParallel = 3)
m
preds = computePredictedValues(m)
evaluateModelFit(hM = m, predY = preds)
computeAssociations(m)
Hmsc::getPostEstimate(m, "Beta")
snapshot
?Hmsc
snapshot
# Model
m=Hmsc(Y = abund_to_occ(as.matrix(snapshot)),
XData = as.data.frame(XData), XFormula = ~ 1+env1+I(env1^2),
studyDesign = studyDesign, ranLevels = ranEff,
distr = "probit")
m = sampleMcmc(m, samples = 1000, nChains = 3, nParallel = 3)
m
preds = computePredictedValues(m)
evaluateModelFit(hM = m, predY = preds)
computeAssociations(m)
Hmsc::getPostEstimate(m, "Beta")
computeAssociations(m)
occ
m3=Hmsc(Y = as.matrix(snapshot),
XData = as.data.frame(XData), XFormula = ~ 1+env1+I(env1^2),
studyDesign = studyDesign, ranLevels = ranEff,
distr = "poisson")
m3 = sampleMcmc(m3, samples = 1000, nChains = 3, nParallel = 3)
preds = computePredictedValues(m3)
evaluateModelFit(hM = m3, predY = preds)
computeAssociations(m3)
Hmsc::getPostEstimate(m3, "Beta")
curve(0.9+3.3*x-2.79*x^2, xlim = c(0,1))
curve(-0.19+3.58*x-4.65*x^2, xlim = c(0,1), add = T)
curve(-0.19+3.58*x-4.65*x^2, xlim = c(0,1))
library(PLNmodels)
