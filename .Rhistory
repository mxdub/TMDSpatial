}
tmp
}
occ = to_array(occ)
occupancies = occ
occupancies[occ>0]=1
## Proportion de site occupés
occupancies = apply(occupancies, c(1,3), sum) / N_patch
occupancies = occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species) %>%
mutate(name = str_replace(name, "V", "")) %>%
mutate_at(.vars = c("name"), as.numeric)
ggplot(occupancies%>%filter(name>0)%>%filter(name%%2==0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))
N_patch = 250
N_species=3
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 50,
env_niche_breadth = 0.1, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.6,
0.0,0.6,0.5), byrow = T, nrow = 3),
dispersal = 0.3, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 300, burn_in = 100, initialization = 0)
occ = t$dynamics.df %>% select(-env_niche_breadth, -max_r, -optima, -env)
### Check spatial autocorrelation
ndt_spat = t$env.df %>% filter(time_run == t$env.df$time_run[1]) %>% select(env1, patch) %>%
left_join(t$landscape %>% as_tibble() %>% rownames_to_column(var="patch") %>% mutate_at("patch", as.numeric))
ggplot(ndt_spat, aes(x=x, y=y, color = env1))+
geom_point()+
scale_color_gradient2(low = "blue", mid = "white", high = 'red', midpoint = 0.5)+
theme_classic()
#### Transform output ####
to_array = function(x){
x_ = x %>%spread(time, N)
tmp = array(0, dim = c(length(unique(x$species)),
length(unique(x$patch)),
length(unique(x$time))))
for(s in 1:length(unique(x$species))){
tmp[s,,] = x_ %>% filter(species == s)%>%arrange(patch)%>%select(-patch, -species)%>%as.matrix()
}
tmp
}
occ = to_array(occ)
occupancies = occ
occupancies[occ>0]=1
## Proportion de site occupés
occupancies = apply(occupancies, c(1,3), sum) / N_patch
occupancies = occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species) %>%
mutate(name = str_replace(name, "V", "")) %>%
mutate_at(.vars = c("name"), as.numeric)
ggplot(occupancies%>%filter(name>0)%>%filter(name%%2==0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))
## Computing C-score
position_  = 100
occupancies = occ
occupancies[occ>0]=1
occ_cscore = t(occupancies[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
## Computing C-score
position_  = 125
occupancies = occ
occupancies[occ>0]=1
occ_cscore = t(occupancies[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
occ = t$dynamics.df %>% select(-env_niche_breadth, -max_r, -optima, -env)
to_array = function(x){
x_ = x %>%spread(time, N)
tmp = array(0, dim = c(length(unique(x$species)),
length(unique(x$patch)),
length(unique(x$time))))
for(s in 1:length(unique(x$species))){
tmp[s,,] = x_ %>% filter(species == s)%>%arrange(patch)%>%select(-patch, -species)%>%as.matrix()
}
tmp
}
occ
head(occ)
occupancies
str(occupancies)
occ = t$dynamics.df %>% select(-env_niche_breadth, -max_r, -optima, -env)
str(ovv)
str(occ)
str(to_array(occ))
t$dynamics.df
t$dynamics.df[t$dynamics.df$time==10,]
t$dynamics.df[t$dynamics.df$time==100,]
t$dynamics.df[t$dynamics.df$time==110,]
simulate_MC()
simulate_MC(5,5)
simulate_MC(5,5,F)
simulate_MC(5,5,temporal_autocorr = F)
library(TMDSpatial)
library(TMDSpatial)
simulate_MC(5,5)
install.packages("roxygen2")
library(TMDSpatial)
simulate_MC(5,5)
simulate_MC(5,5) %>% sim_to_matrix()
t = simulate_MC(5,5)
sim_output = t
x_ = sim_output$dynamics.df %>% select(-env_niche_breadth, -max_r, -optima, -env)
x_
x_ = x_ %>%spread(time, N)
x_
str(x_)
x = sim_output$dynamics.df %>% select(-env_niche_breadth, -max_r, -optima, -env)
x
str(x)
library(TMDSpatial)
simulate_MC(5,5) %>% sim_to_matrix()
simulate_MC(5,5) %>% sim_to_matrix() %>% str()
occ = sim_to_matrix(t)
occ
str(occ)
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 50,
env_niche_breadth = 0.1, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.6,
0.0,0.6,0.5), byrow = T, nrow = 3),
dispersal = 0.3, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 300, burn_in = 100, initialization = 0)
ndt_spat = t$env.df %>% filter(time_run == t$env.df$time_run[1]) %>% select(env1, patch) %>%
left_join(t$landscape %>% as_tibble() %>% rownames_to_column(var="patch") %>% mutate_at("patch", as.numeric))
ggplot(ndt_spat, aes(x=x, y=y, color = env1))+
geom_point()+
scale_color_gradient2(low = "blue", mid = "white", high = 'red', midpoint = 0.5)+
theme_classic()
occupancies = occ
occupancies[occ>0]=1
occ = sim_to_matrix(t)
occ
str(occ)
?sim_to_matrix
library(TMDSpatial)
str(occ)
library(TMDSpatial)
t
occ = sim_to_matrix(t)
occ
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
occupancies
occupancies
abundances
str(abundances)
abundances[abundances>0]=1
abundances
library(TMDSpatial)
library(TMDSpatial)
abund_to_occ
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
occupancies
abundances %>% uniq()
abundances %>% unique()
abundances
occupancies
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
occupancies = occ
occupancies[occ>0]=1
## Proportion de site occupés
occupancies = apply(occupancies, c(1,3), sum) / N_patch
occupancies = occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species) %>%
mutate(name = str_replace(name, "V", "")) %>%
mutate_at(.vars = c("name"), as.numeric)
ggplot(occupancies%>%filter(name>0)%>%filter(name%%2==0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))
occupancies
occupancies = abund_to_occ(abundances)
str(occupancies)
dim(occupancies)
occupancies = apply(occupancies, c(1,3), sum) / dim(occupancies)[2]
occupancies = occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species) %>%
mutate(name = str_replace(name, "V", "")) %>%
mutate_at(.vars = c("name"), as.numeric)
occupancies
ggplot(occupancies%>%filter(name>0)%>%filter(name%%2==0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))
ggplot(occupancies%>%filter(name>0)%>%filter(name%%1==0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))
ggplot(occupancies%>%filter(name>0)%>%filter(name%%5==0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))
ggplot(occupancies%>%filter(name>0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))
ggplot(occupancies, aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))
ggplot(occupancies%>%filter(name>0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))
ggplot(occupancies%>%filter(name>0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))+
labs(x = "Time", y = "Occupancy", color = "Species")
library(TMDSpatial)
ggplot(occupancies%>%filter(name>0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))+
labs(x = "Time", y = "Occupancy", color = "Species")+
theme_bw()
ggplot(occupancies%>%filter(name>0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))+
labs(x = "Time", y = "Occupancy", color = "Species")+
theme_dark()
ggplot(occupancies%>%filter(name>0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))+
labs(x = "Time", y = "Occupancy", color = "Species")+
theme_classic()
ggplot(occupancies%>%filter(name>0), aes(x=name, y=value, color = as.factor(species)))+
geom_line()+
scale_y_continuous(limits=c(0,1))+
labs(x = "Time", y = "Occupancy", color = "Species")+
theme_bw()
library(TMDSpatial)
## Proportion de site occupés
plots_occupancies(occupancies)
occupancies
occupancies = abund_to_occ(abundances)
## Proportion de site occupés
plots_occupancies(occupancies)
occupancies
apply(occupancies, c(1,3), sum) / dim(occupancies)[2]
occupancies = apply(occupancies, c(1,3), sum) / dim(occupancies)[2]
occupancies %>% as_tibble()
occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species)
occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species) %>%
mutate(name = str_replace(name, "V", ""))
occupancies %>% as_tibble() %>% rowid_to_column("species") %>%
pivot_longer(-species) %>%
mutate(name = str_replace(name, "V", "")) %>%
mutate_at(.vars = c("name"), as.numeric)
library(TMDSpatial)
occupancies %>% as_tibble()
as_tibble.matrix()
?as_tibble()
occupancies
occupancies %>% as_tibble()
library(TMDSpatial)
occupancies %>% as_tibble(.name_repair = "minimal")
## Proportion de site occupés
plots_occupancies(occupancies)
occupancies = abund_to_occ(abundances)
## Proportion de site occupés
plots_occupancies(occupancies)
library(TMDSpatial)
occupancies %>% as_tibble(.name_repair = "universal")
occupancies
occupancies %>% as_tibble(.name_repair = "universal")
occupancies %>% as_tibble(.name_repair = "unique")
occupancies %>% as_tibble()
str(occupancies)
occupancies = apply(occupancies, c(1,3), sum) / dim(occupancies)[2]
occupancies %>% as_tibble(.name_repair = "minimal")
occupancies %>% as_tibble(.name_repair = "unique")
occupancies %>% as_tibble(.name_repair = "universal")
occupancies %>% as_tibble(.name_repair = "check_unique")
occupancies
occupancies %>% as_tibble()
library(TMDSpatial)
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
## Proportion de site occupés
plots_occupancies(occupancies)
## Computing C-score
position_  = 125
occ_cscore = t(occupancies[,,position_])
occ_cscore
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
occupancies
str(occupancies)
apply(occupancies, c(2,3), sum)
str(apply(occupancies, c(2,3), sum))
apply(occupancies, c(2,3), sum)
which(apply(occupancies, c(2,3), sum), arr.ind = T)
which(apply(occupancies, c(2,3), sum)>1, arr.ind = T)
apply(occupancies, c(2,3), sum)
apply(occupancies, c(2,3), sum)[positions_]
apply(occupancies, c(2,3), sum)[positions_,]
apply(occupancies, c(2,3), sum)[position_,]
occ_cscore
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore[,c(1,2)]), nperm = 1000, outpath = "./outputs/", verbose = T)
## Computing C-score
position_  = 75
occ_cscore = t(occupancies[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore[,c(1,2)]), nperm = 1000, outpath = "./outputs/", verbose = T)
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
## Computing C-score
position_  = 200
occ_cscore = t(occupancies[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
occ_cscore
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore[,c(1,2)]), nperm = 1000, outpath = "./outputs/", verbose = T)
as.data.frame(occ_cscore[,c(1,2)])
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 50,
env_niche_breadth = 0.1, env_optima = c(0.5,0.5,0.5),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.3, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 300, burn_in = 100, initialization = 0)
ndt_spat = t$env.df %>% filter(time_run == t$env.df$time_run[1]) %>% select(env1, patch) %>%
left_join(t$landscape %>% as_tibble() %>% rownames_to_column(var="patch") %>% mutate_at("patch", as.numeric))
ggplot(ndt_spat, aes(x=x, y=y, color = env1))+
geom_point()+
scale_color_gradient2(low = "blue", mid = "white", high = 'red', midpoint = 0.5)+
theme_classic()
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
## Proportion de site occupés
plots_occupancies(occupancies)
## Computing C-score
position_  = 200
occ_cscore = t(occupancies[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
t$env.df
t$env.df
mod = varpart(occ_cscore, ~., pcnm(dist(t$landscape))$vectors, data = data.frame(env1 = t$env.df$env1[1:N_patch]), transfo = 'hel')
mod
showvarparts(2, bg = c("hotpink","skyblue"))
plot(mod, bg = c("hotpink","skyblue"))
afrac = rda(decostand(occ_cscore, "hel"), model.matrix(~., data.frame(env1 = t$env.df$env1[1:100]))[,-1], pcnm(dist(t$landscape))$vectors)
afrac = rda(decostand(occ_cscore, "hel"),
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1],
pcnm(dist(t$landscape))$vectors)
anova(afrac, step = 200, perm.max = 200)
afrac = rda(decostand(occ_cscore, "hel"),
pcnm(dist(t$landscape))$vectors,
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1])
anova(afrac, step = 200, perm.max = 200)
mod = varpart(occ_cscore, ~.,
pcnm(dist(t$landscape))$vectors, data = data.frame(env1 = t$env.df$env1[1:N_patch]), transfo = 'hel')
mod
showvarparts(2, bg = c("hotpink","skyblue"))
?varpart
mod = varpart(vegdist(occ_cscore),
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]))
mod
?vegdist
occ_cscore
?decostand()
abundances
occ_cscore
occ_cscore
rownames(occ_cscore) = paste0("P", 1:N_patch)
occ_cscore = t(abundances[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
occ_cscore
mod = varpart(occ_cscore,
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]), transfo = 'hel')
mod
showvarparts(2, bg = c("hotpink","skyblue"))
plot(mod, bg = c("hotpink","skyblue"))
afrac = rda(decostand(occ_cscore, "hel"),
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1],
pcnm(dist(t$landscape))$vectors)
anova(afrac, step = 200, perm.max = 200)
afrac = rda(decostand(occ_cscore, "hel"),
pcnm(dist(t$landscape))$vectors,
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1])
anova(afrac, step = 200, perm.max = 200)
?decostand
?vegdist
mod = varpart(vegdist(occ_cscore, method = "bray"),
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]))
mod
data.frame(env1 = t$env.df$env1[1:N_patch])
mod = varpart(vegdist(occ_cscore, method = "bray"),
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]))
mod
showvarparts(2, bg = c("hotpink","skyblue"))
plot(mod, bg = c("hotpink","skyblue"))
afrac = rda(vegdist(occ_cscore, method = "bray"),
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1],
pcnm(dist(t$landscape))$vectors)
afrac = rda(decostand(occ_cscore, "hel"),
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1],
pcnm(dist(t$landscape))$vectors)
anova(afrac, step = 200, perm.max = 200)
afrac = rda(decostand(occ_cscore, "hel"),
pcnm(dist(t$landscape))$vectors,
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1])
anova(afrac, step = 200, perm.max = 200)
N_patch = 250
N_species=3
t = simulate_MC(N_patch, species = N_species,
min_inter = 0, max_inter = 2,
temporal_autocorr = F, env1Scale = 50,
env_niche_breadth = 0.05, env_optima = c(0.2,0.5,0.9),
int_mat = matrix(c(0.5,0.0,0.0,
0.0,0.5,0.5,
0.0,0.5,0.5), byrow = T, nrow = 3),
dispersal = 0.3, kernel_exp = 0.001,
extirp_prob = c(0),
timesteps = 300, burn_in = 100, initialization = 0)
### Check spatial autocorrelation
ndt_spat = t$env.df %>% filter(time_run == t$env.df$time_run[1]) %>% select(env1, patch) %>%
left_join(t$landscape %>% as_tibble() %>% rownames_to_column(var="patch") %>% mutate_at("patch", as.numeric))
ggplot(ndt_spat, aes(x=x, y=y, color = env1))+
geom_point()+
scale_color_gradient2(low = "blue", mid = "white", high = 'red', midpoint = 0.5)+
theme_classic()
#### Transform output ####
abundances = sim_to_matrix(t)
occupancies = abund_to_occ(abundances)
## Plots occupancies
plots_occupancies(occupancies)
#### C-score #### (on occupancies)
## Computing C-score
position_  = 200
occ_cscore = t(occupancies[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
# Need at least one co-occ...
ecospat.Cscore(as.data.frame(occ_cscore), nperm = 1000, outpath = "./outputs/", verbose = T)
library(vegan)
occ_cscore = t(abundances[,,position_])
colnames(occ_cscore) = paste0("S", 1:N_species)
rownames(occ_cscore) = paste0("P", 1:N_patch)
mod = varpart(occ_cscore,
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]), transfo = 'hel')
mod
showvarparts(2, bg = c("hotpink","skyblue"))
plot(mod, bg = c("hotpink","skyblue"))
afrac = rda(decostand(occ_cscore, "hel"),
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1],
pcnm(dist(t$landscape))$vectors)
anova(afrac, step = 200, perm.max = 200)
afrac = rda(decostand(occ_cscore, "hel"),
pcnm(dist(t$landscape))$vectors,
model.matrix(~., data.frame(env1 = t$env.df$env1[1:N_patch]))[,-1])
anova(afrac, step = 200, perm.max = 200)
mod = varpart(vegdist(occ_cscore, method = "bray"),
~.,
pcnm(dist(t$landscape))$vectors,
data = data.frame(env1 = t$env.df$env1[1:N_patch]))
occ_cscore
# Hmsc
library(Hmsc)
# Créer un tableau qui donne les id des sites pour l'effet random (de taille nrow() de ta matrice de presence/absence)
studyDesign = data.frame( samples = as.factor(rownames(occ_cscore))  )
# Créer un liste d'effet random, ici, juste un, l'effet 'site'
ranEff = list()
ranEff[['samples']] = HmscRandomLevel(units = unique(studyDesign$samples))
# Var env.
XData = tibble(env1 = t$env.df %>% filter(time_run == min(time_run)) %>% pull(env1))
# Et finalement, pour définir le modèle (du coup, a adapter avec tes variables à toi, c, x et t - je n'utilisais pas de traits pour ma part)
m=Hmsc(Y = as.matrix(occ_cscore),
XData = as.data.frame(XData), XFormula = ~ 1+env1+I(env1^2),
studyDesign = studyDesign, ranLevels = ranEff,
distr = "probit")
m = sampleMcmc(m, samples = 1000, nChains = 3, nParallel = 3)
preds = computePredictedValues(m)
evaluateModelFit(hM = m, predY = preds)
?Hmsc
